openapi: 3.0.2
info:
  title: Mojaloop DFSP/Switch API
  version: '1.0'
  description: A Mojaloop API for thirdparty interactions between `DFSPs` (Digital Financial Service Providers) and a Mojaloop Switch.
  license:
    name: TBD
    url: TBD
servers:
  - url: /
paths:
  '/accounts/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
        description: The identifier value.
      - name: Date
        in: header
        schema:
          type: string
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema:
          type: string
        required: false
        description: |-
          The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.

          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema:
          type: string
        required: true
        description: The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema:
          type: string
        required: false
        description: 'The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty.'
      - name: FSPIOP-Encryption
        in: header
        schema:
          type: string
        required: false
        description: The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema:
          type: string
        required: false
        description: The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema:
          type: string
        required: false
        description: 'The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'
      - name: FSPIOP-HTTP-Method
        in: header
        schema:
          type: string
        required: false
        description: 'The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'
    get:
      operationId: GetAccountsByUserId
      summary: GetAccountsByUserId
      description: |
        The HTTP request `GET /accounts/{ID}` is used to retrieve the list of potential accounts available for linking.
      tags:
        - accounts
        - sampled
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    put:
      description: |
        The HTTP request `PUT /accounts/{ID}` is used to return the list of potential accounts available for linking
      operationId: UpdateAccountsByUserId
      summary: UpdateAccountsByUserId
      tags:
        - accounts
        - sampled
      parameters:
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: AccountsIDPutResponse
              type: object
              description: 'The object sent in a `PUT /accounts/{ID}` request.'
              properties:
                accounts:
                  type: array
                  items:
                    title: Account
                    type: object
                    description: Data model for the complex type Account.
                    properties:
                      accountNickname:
                        title: Name
                        type: string
                        pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                        description: |-
                          The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.

                          Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (â€˜), dash (-), comma (,) and space characters ( ).

                          **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                      id:
                        title: AccountId
                        type: string
                        description: |
                          A long-lived unique account identifier provided by the DFSP. This MUST NOT
                          be Bank Account Number or anything that may expose a User's private bank
                          account information.
                        pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                        minLength: 1
                        maxLength: 1023
                      currency:
                        title: Currency
                        description: 'The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.'
                        type: string
                        minLength: 3
                        maxLength: 3
                        enum:
                          - AED
                          - AFN
                          - ALL
                          - AMD
                          - ANG
                          - AOA
                          - ARS
                          - AUD
                          - AWG
                          - AZN
                          - BAM
                          - BBD
                          - BDT
                          - BGN
                          - BHD
                          - BIF
                          - BMD
                          - BND
                          - BOB
                          - BRL
                          - BSD
                          - BTN
                          - BWP
                          - BYN
                          - BZD
                          - CAD
                          - CDF
                          - CHF
                          - CLP
                          - CNY
                          - COP
                          - CRC
                          - CUC
                          - CUP
                          - CVE
                          - CZK
                          - DJF
                          - DKK
                          - DOP
                          - DZD
                          - EGP
                          - ERN
                          - ETB
                          - EUR
                          - FJD
                          - FKP
                          - GBP
                          - GEL
                          - GGP
                          - GHS
                          - GIP
                          - GMD
                          - GNF
                          - GTQ
                          - GYD
                          - HKD
                          - HNL
                          - HRK
                          - HTG
                          - HUF
                          - IDR
                          - ILS
                          - IMP
                          - INR
                          - IQD
                          - IRR
                          - ISK
                          - JEP
                          - JMD
                          - JOD
                          - JPY
                          - KES
                          - KGS
                          - KHR
                          - KMF
                          - KPW
                          - KRW
                          - KWD
                          - KYD
                          - KZT
                          - LAK
                          - LBP
                          - LKR
                          - LRD
                          - LSL
                          - LYD
                          - MAD
                          - MDL
                          - MGA
                          - MKD
                          - MMK
                          - MNT
                          - MOP
                          - MRO
                          - MUR
                          - MVR
                          - MWK
                          - MXN
                          - MYR
                          - MZN
                          - NAD
                          - NGN
                          - NIO
                          - NOK
                          - NPR
                          - NZD
                          - OMR
                          - PAB
                          - PEN
                          - PGK
                          - PHP
                          - PKR
                          - PLN
                          - PYG
                          - QAR
                          - RON
                          - RSD
                          - RUB
                          - RWF
                          - SAR
                          - SBD
                          - SCR
                          - SDG
                          - SEK
                          - SGD
                          - SHP
                          - SLL
                          - SOS
                          - SPL
                          - SRD
                          - STD
                          - SVC
                          - SYP
                          - SZL
                          - THB
                          - TJS
                          - TMT
                          - TND
                          - TOP
                          - TRY
                          - TTD
                          - TVD
                          - TWD
                          - TZS
                          - UAH
                          - UGX
                          - USD
                          - UYU
                          - UZS
                          - VEF
                          - VND
                          - VUV
                          - WST
                          - XAF
                          - XCD
                          - XDR
                          - XOF
                          - XPF
                          - YER
                          - ZAR
                          - ZMW
                          - ZWD
                    required:
                      - accountNickname
                      - id
                      - currency
              required:
                - accounts
            example:
              - accountNickname: dfspa.user.nickname1
                id: dfspa.username.1234
                currency: ZAR
              - accountNickname: dfspa.user.nickname2
                id: dfspa.username.5678
                currency: USD
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/accounts/{ID}/error':
    parameters:
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
      - name: Content-Length
        in: header
        required: false
        schema:
          type: integer
        description: |-
          The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.

          **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    put:
      description: |
        The HTTP request `PUT /accounts/{ID}/error` is used to return error information
      operationId: UpdateAccountsByUserIdError
      summary: UpdateAccountsByUserIdError
      tags:
        - accounts
        - sampled
      requestBody:
        description: Details of the error returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: Data model for the complex type object that contains ErrorInformation.
              properties:
                errorInformation:
                  title: ErrorInformation
                  type: object
                  description: Data model for the complex type ErrorInformation.
                  properties:
                    errorCode:
                      title: ErrorCode
                      type: string
                      pattern: '^[1-9]\d{3}$'
                      description: 'The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.'
                      example: '5100'
                    errorDescription:
                      title: ErrorDescription
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: Error description string.
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: 'Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.'
                      properties:
                        extension:
                          type: array
                          items:
                            title: Extension
                            type: object
                            description: Data model for the complex type Extension.
                            properties:
                              key:
                                title: ExtensionKey
                                type: string
                                minLength: 1
                                maxLength: 32
                                description: Extension key.
                              value:
                                title: ExtensionValue
                                type: string
                                minLength: 1
                                maxLength: 128
                                description: Extension value.
                            required:
                              - key
                              - value
                          minItems: 1
                          maxItems: 16
                          description: Number of Extension elements.
                      required:
                        - extension
                  required:
                    - errorCode
                    - errorDescription
              required:
                - errorInformation
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  /consentRequests:
    post:
      tags:
        - consentRequests
        - sampled
      operationId: CreateConsentRequest
      summary: CreateConsentRequest
      description: |
        A request from a PISP to a DFSP to start the process of delegating consent
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
      requestBody:
        description: The consentRequest to create
        required: true
        content:
          application/json:
            schema:
              title: ConsentRequestsPostRequest
              type: object
              description: The object sent in a `POST /consentRequests` request.
              properties:
                consentRequestId:
                  title: CorrelationId
                  type: string
                  pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
                  description: 'Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (â€˜-â€˜).'
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                userId:
                  type: string
                  description: ID used to associate request with GET /accounts request.
                scopes:
                  type: array
                  items:
                    title: Scope
                    type: object
                    description: Scope + Account Identifier mapping for a Consent.
                    example: |
                      {
                        accountId: "dfsp.username.5678",
                        actions: [ "accounts.transfer", "accounts.getBalance" ]
                      }
                    properties:
                      accountId:
                        $ref: '#/paths/~1accounts~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/accounts/items/properties/id'
                      actions:
                        type: array
                        items:
                          title: ConsentScopeType
                          type: string
                          enum:
                            - accounts.getBalance
                            - accounts.transfer
                          description: |
                            The scopes requested for a ConsentRequest.
                            - "accounts.getBalance" - Get the balance of a given account.
                            - "accounts.transfer" - Initiate a transfer from an account.
                    required:
                      - accountId
                      - actions
                authChannels:
                  type: array
                  items:
                    title: ConsentRequestChannelType
                    type: string
                    enum:
                      - WEB
                      - OTP
                    description: |
                      The auth channel being used for the consentRequest.
                      - "WEB" - The Web auth channel.
                      - "OTP" - The OTP auth channel.
                callbackUri:
                  type: string
                  description: The callback uri that the user will be redirected to after completing the WEB auth channel.
              required:
                - consentRequestId
                - userId
                - scopes
                - authChannels
                - callbackUri
            example:
              id: '456'
              initiatorId: pispA
              authChannels:
                - WEB
                - OTP
              scopes:
                - accountId: dfspa.username.1234
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
                - accountId: dfspa.username.5678
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
              callbackUri: 'pisp-app://callback.com'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/consentRequests/{ID}':
    parameters:
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    put:
      tags:
        - consentRequests
        - sampled
      operationId: UpdateConsentRequest
      summary: UpdateConsentRequest
      description: |
        DFSP updates auth channels and/or auth uri in response to consentRequest.

        PISP updates the consentRequest to include authorization token from their user,
        which the DFSP is to then verify.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentRequestsIDPutResponseWeb
                  type: object
                  description: |
                    The object sent in a `PUT /consentRequests/{ID}` request.

                    Schema used in the request consent phase of the account linking web flow,
                    the result is the PISP being instructed on a specific URL where this
                    supposed user should be redirected. This URL should be a place where
                    the user can prove their identity (e.g., by logging in).
                  properties:
                    consentRequestId:
                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'
                    authChannels:
                      type: array
                      items:
                        title: ConsentRequestChannelTypeWeb
                        type: string
                        enum:
                          - WEB
                        description: |
                          The web auth channel being used for PUT consentRequest/{ID} request.
                    callbackUri:
                      type: string
                      description: The callback uri that the user will be redirected to after completing the WEB auth channel.
                    authUri:
                      type: string
                      description: The callback uri that the pisp app redirects to for user to complete their login.
                  required:
                    - consentRequestId
                    - scopes
                    - authChannels
                    - callbackUri
                    - authUri
                  additionalProperties: false
                - title: ConsentRequestsIDPutResponseOTP
                  type: object
                  description: |
                    The object sent in a `PUT /consentRequests/{ID}` request.

                    Schema used in the request consent phase of the account linking OTP/SMS flow.
                  properties:
                    consentRequestId:
                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'
                    authChannels:
                      type: array
                      items:
                        title: ConsentRequestChannelTypeOTP
                        type: string
                        enum:
                          - OTP
                        description: |
                          The OTP auth channel being used for PUT consentRequest/{ID} request.
                    callbackUri:
                      type: string
                      description: The callback uri that the user will be redirected to after completing the WEB auth channel.
                  required:
                    - consentRequestId
                    - scopes
                    - authChannels
                    - callbackUri
                  additionalProperties: false
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    patch:
      tags:
        - consentRequests
        - sampled
      operationId: PatchConsentRequest
      summary: PatchConsentRequest
      description: |
        PISP sends user's OTP token to a DFSP to verify user trusts aforementioned PISP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ConsentRequestsIDPatchRequest
              type: object
              description: 'The object sent in a `PATCH /consentRequests/{ID}` request.'
              properties:
                authToken:
                  type: string
              required:
                - authToken
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/consentRequests/{ID}/error':
    put:
      tags:
        - consentRequests
      operationId: NotifyErrorConsentRequests
      summary: NotifyErrorConsentRequests
      description: |
        DFSP responds to the PISP if something went wrong with validating an OTP or secret.
      parameters:
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  /consents:
    post:
      tags:
        - consents
        - sampled
      operationId: PostConsents
      summary: PostConsents
      description: |
        DFSP sends this request to the PISP after granting consent. DFSP sends this request to an Auth service to validate a signed consent.
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentPostRequestAUTH
                  type: object
                  description: |
                    The object sent in a `POST /consents` request to AUTH-SERVICE by DFSP to store registered consent with PublicKey
                    and whatever needed to perform authorization validation later
                  properties:
                    consentId:
                      allOf:
                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                      description: |
                        Common ID between the PISP and FSP for the Consent object
                        decided by the DFSP who creates the Consent
                        This field is REQUIRED for POST /consent.
                        creation of this Consent.
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'
                    credential:
                      allOf:
                        - $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential'
                  required:
                    - consentId
                    - scopes
                    - credential
                  additionalProperties: false
                - title: ConsentPostRequestPISP
                  type: object
                  description: The object sent in a `POST /consents` request to PISP by DFSP to ask for delivering the credential object.
                  properties:
                    consentId:
                      allOf:
                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                      description: |
                        Common ID between the PISP and FSP for the Consent object
                        decided by the DFSP who creates the Consent
                        This field is REQUIRED for POST /consent.
                    consentRequestId:
                      allOf:
                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                      description: |
                        The id of the ConsentRequest that was used to initiate the
                        creation of this Consent.
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'
                  required:
                    - consentId
                    - scopes
                    - consentRequestId
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
                properties:
                  errorInformation:
                    $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema/properties/errorInformation'
          headers:
            Content-Length:
              required: false
              schema:
                type: integer
              description: |-
                The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.

                **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
            Content-Type:
              schema:
                type: string
              required: true
              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'
  '/consents/{ID}':
    parameters:
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
      - name: Content-Type
        in: header
        schema:
          type: string
        required: true
        description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    get:
      description: |
        The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`. summary: GetConsent
      tags:
        - consents
      operationId: GetConsent
      summary: GetConsent
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    patch:
      description: |
        The HTTP request `PATCH /consents/{ID}` is used

        - In account linking in the Credential Registration phase. Used by a DFSP
          to notify a PISP a credential has been verified and registered with an
          Auth service.

        - In account unlinking by a hub hosted auth service and by DFSPs
          in non-hub hosted scenarios to notify participants of a consent being revoked.

          Called by a `auth-service` to notify a PISP and DFSP of consent status in hub hosted scenario.
          Called by a `DFSP` to notify a PISP of consent status in non-hub hosted scenario.
      tags:
        - consents
        - sampled
      operationId: PatchConsentByID
      summary: PatchConsentByID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentsIDPatchResponseVerified
                  description: |
                    PATCH /consents/{ID} request object.

                    Sent by the DFSP to the PISP when a consent is verified.
                    Used in the "Register Credential" part of the Account linking flow.
                  type: object
                  properties:
                    credential:
                      type: object
                      properties:
                        status:
                          title: ConsentStatusType
                          type: string
                          enum:
                            - VERIFIED
                          description: |
                            The status of the Consent.
                            - "VERIFIED" - The Consent is valid and verified.
                      required:
                        - status
                  required:
                    - credential
                - title: ConsentsIDPatchResponseRevoked
                  description: |
                    PATCH /consents/{ID} request object.

                    Sent to both the PISP and DFSP when a consent is revoked.
                    Used in the "Unlinking" part of the Account Unlinking flow.
                  type: object
                  properties:
                    status:
                      title: ConsentStatusType
                      type: string
                      enum:
                        - REVOKED
                      description: |
                        The status of the Consent.
                        - "REVOKED" - The Consent is no longer valid and has been revoked.
                    revokedAt:
                      title: DateTime
                      type: string
                      pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$'
                      description: 'The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).'
                      example: '2016-05-24T08:38:08.699-04:00'
                  required:
                    - status
                    - revokedAt
      parameters:
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    put:
      description: |
        The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth Service.

        - Called by a `PISP` to after signing a challenge. Sent to an DFSP for verification.
        - Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
      tags:
        - consents
        - sampled
      operationId: PutConsentByID
      summary: PutConsentByID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentsIDPutResponseSigned
                  type: object
                  description: |
                    The HTTP request `PUT /consents/{ID}` is used by the PISP to update a Consent with a signed challenge and register a credential.
                    Called by a `PISP` to after signing a challenge. Sent to a DFSP for verification.
                  properties:
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'
                    credential:
                      title: SignedCredential
                      type: object
                      description: |
                        A credential used to allow a user to prove their identity and access
                        to an account with a DFSP.

                        SignedCredential is a special formatting of the credential to allow us to be
                        more explicit about the `status` field - it should only ever be PENDING when
                        updating a credential.
                      properties:
                        credentialType:
                          title: CredentialType
                          type: string
                          enum:
                            - FIDO
                          description: |
                            The type of the Credential.
                            - "FIDO" - A FIDO public/private keypair
                        status:
                          type: string
                          enum:
                            - PENDING
                          description: The challenge has signed but not yet verified.
                        payload:
                          title: FIDOPublicKeyCredential
                          type: object
                          description: |
                            An object sent in a `PUT /consents/{ID}` request.
                            Based on https://w3c.github.io/webauthn/#iface-pkcredential
                            and mostly on: https://webauthn.guide/#registration
                            AuthenticatorAttestationResponse
                            https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-attestationobject
                          properties:
                            id:
                              type: string
                              description: |
                                credential id: identifier of pair of keys, base64 encoded
                                https://w3c.github.io/webauthn/#ref-for-dom-credential-id
                              minLength: 59
                              maxLength: 118
                            rawId:
                              type: string
                              description: |
                                raw credential id: identifier of pair of keys, base64 encoded
                              minLength: 59
                              maxLength: 118
                            response:
                              type: object
                              description: |
                                AuthenticatorAttestationResponse
                              properties:
                                clientDataJSON:
                                  type: string
                                  description: |
                                    JSON string with client data
                                  minLength: 121
                                  maxLength: 512
                                attestationObject:
                                  type: string
                                  description: |
                                    CBOR.encoded attestation object
                                  minLength: 306
                                  maxLength: 2048
                              required:
                                - clientDataJSON
                                - attestationObject
                              additionalProperties: false
                            type:
                              type: string
                              description: 'response type, we need only the type of public-key'
                              enum:
                                - public-key
                          required:
                            - id
                            - rawId
                            - response
                            - type
                          additionalProperties: false
                      required:
                        - credentialType
                        - status
                        - payload
                      additionalProperties: false
                  required:
                    - scopes
                    - credential
                  additionalProperties: false
                - title: ConsentsIDPutResponseVerified
                  type: object
                  description: |
                    The HTTP request `PUT /consents/{ID}` is used by the DFSP or Auth-Service to update a Consent object once it has been Verified.
                    Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
                  properties:
                    scopes:
                      type: array
                      items:
                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'
                    credential:
                      title: VerifiedCredential
                      type: object
                      description: |
                        A credential used to allow a user to prove their identity and access
                        to an account with a DFSP.

                        VerifiedCredential is a special formatting of the credential to allow us to be
                        more explicit about the `status` field - it should only ever be VERIFIED when
                        updating a credential.
                      properties:
                        credentialType:
                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/credentialType'
                        status:
                          type: string
                          enum:
                            - VERIFIED
                          description: 'The Credential is valid, and ready to be used by the PISP.'
                        payload:
                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/payload'
                      required:
                        - credentialType
                        - status
                        - payload
                      additionalProperties: false
                  required:
                    - scopes
                    - credential
                  additionalProperties: false
      parameters:
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    delete:
      description: |
        The HTTP request `DELETE /consents/{ID}` is used to mark as deleted a previously created consent.

        - Called by a PISP when a user wants to remove their consent.
      operationId: DeleteConsentByID
      tags:
        - consents
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/consents/{ID}/error':
    put:
      tags:
        - consents
      operationId: NotifyErrorConsents
      summary: NotifyErrorConsents
      description: |
        DFSP responds to the PISP if something went wrong with validating or storing consent.
      parameters:
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  /thirdpartyRequests/authorizations:
    post:
      description: |
        The HTTP request `POST /thirdpartyRequests/authorizations` is used to request the Payer to enter the applicable credentials in the PISP system.
      operationId: PostThirdpartyRequestsAutorizations
      summary: PostThirdpartyRequestsAutorizations
      tags:
        - authorizations
      requestBody:
        description: Authorization request details
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsAuthorizationsPostRequest
              description: POST /thirdpartyRequests/authorizations request object.
              type: object
              properties:
                authorizationRequestId:
                  $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                transactionRequestId:
                  $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                challenge:
                  type: string
                  description: Base64 encoded bytes - The challenge generated by the DFSP.
                quote:
                  title: QuotesIDPutResponse
                  type: object
                  description: 'The object sent in the PUT /quotes/{ID} callback.'
                  properties:
                    transferAmount:
                      $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/amount/allOf/0'
                    payeeReceiveAmount:
                      $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/amount/allOf/0'
                    payeeFspFee:
                      $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/amount/allOf/0'
                    payeeFspCommission:
                      $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/amount/allOf/0'
                    expiration:
                      $ref: '#/paths/~1consents~1%7BID%7D/patch/requestBody/content/application~1json/schema/oneOf/1/properties/revokedAt'
                    geoCode:
                      title: GeoCode
                      type: object
                      description: Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                      properties:
                        latitude:
                          title: Latitude
                          type: string
                          pattern: '^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$'
                          description: The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                          example: '+45.4215'
                        longitude:
                          title: Longitude
                          type: string
                          pattern: '^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$'
                          description: The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                          example: '+75.6972'
                      required:
                        - latitude
                        - longitude
                    ilpPacket:
                      title: IlpPacket
                      type: string
                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                      minLength: 1
                      maxLength: 32768
                      description: Information for recipient (transport layer information).
                      example: AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                    condition:
                      title: IlpCondition
                      type: string
                      pattern: '^[A-Za-z0-9-_]{43}$'
                      maxLength: 48
                      description: Condition that must be attached to the transfer by the Payer.
                    extensionList:
                      $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema/properties/errorInformation/properties/extensionList'
                  required:
                    - transferAmount
                    - expiration
                    - ilpPacket
                    - condition
                transactionType:
                  title: TransactionType
                  type: object
                  description: Data model for the complex type TransactionType.
                  properties:
                    scenario:
                      title: TransactionScenario
                      type: string
                      enum:
                        - DEPOSIT
                        - WITHDRAWAL
                        - TRANSFER
                        - PAYMENT
                        - REFUND
                      description: |-
                        Below are the allowed values for the enumeration.
                        - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
                        - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumerâ€™s account to a Business account, and physical cash is given from the Business User to the Consumer.
                        - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
                        - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
                        - REFUND - Used for performing a refund of transaction.
                      example: DEPOSIT
                    subScenario:
                      title: TransactionSubScenario
                      type: string
                      pattern: '^[A-Z_]{1,32}$'
                      description: 'Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).'
                      example: LOCALLY_DEFINED_SUBSCENARIO
                    initiator:
                      title: TransactionInitiator
                      type: string
                      enum:
                        - PAYER
                        - PAYEE
                      description: |-
                        Below are the allowed values for the enumeration.
                        - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
                        - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
                      example: PAYEE
                    initiatorType:
                      title: TransactionInitiatorType
                      type: string
                      enum:
                        - CONSUMER
                        - AGENT
                        - BUSINESS
                        - DEVICE
                      description: |-
                        Below are the allowed values for the enumeration.
                        - CONSUMER - Consumer is the initiator of the transaction.
                        - AGENT - Agent is the initiator of the transaction.
                        - BUSINESS - Business is the initiator of the transaction.
                        - DEVICE - Device is the initiator of the transaction.
                      example: CONSUMER
                    refundInfo:
                      title: Refund
                      type: object
                      description: Data model for the complex type Refund.
                      properties:
                        originalTransactionId:
                          $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                        refundReason:
                          title: RefundReason
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Reason for the refund.
                          example: Free text indicating reason for the refund.
                      required:
                        - originalTransactionId
                    balanceOfPayments:
                      title: BalanceOfPayments
                      type: string
                      pattern: '^[1-9]\d{2}$'
                      description: '(BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.'
                      example: '123'
                  required:
                    - scenario
                    - initiator
                    - initiatorType
              required:
                - authorizationRequestId
                - transactionRequestId
                - challenge
                - quote
                - transactionType
              additionalProperties: false
            example:
              authorizationRequestId: 33333333-0000-0000-0000-000000000000
              transactionRequestId: 00000000-0000-0000-0000-000000000000
              challenge: <base64 encoded binary - the encoded challenge>
              quote:
                transferAmount:
                  amount: '100'
                  currency: USD
                payeeReceiveAmount:
                  amount: '99'
                  currency: USD
                payeeFspFee:
                  amount: '1'
                  currency: USD
                expiration: '2020-06-15T12:00:00.000'
                ilpPacket: ...
                condition: ...
              transactionType:
                scenario: TRANSFER
                initiator: PAYER
                initiatorType: CONSUMER
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/thirdpartyRequests/authorizations/{ID}':
    put:
      description: |
        The callback PUT /thirdpartyRequests/authorizations/{ID} is used to inform the client of the
        result of a previously-requested authorization. The ID in the URI should
        contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND
      operationId: PutThirdpartyRequestsAuthorizationsById
      summary: PutThirdpartyRequestsAuthorizationsById
      tags:
        - authorizations
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            information about result of required (via POST) /authorization
          content:
            application/json:
              schema:
                title: ThirdpartyRequestsAuthorizationsIDPutResponse
                type: object
                description: 'The object sent in the PUT /thirdpartyRequests/authorizations/{ID} callback.'
                properties:
                  authenticationInfo:
                    title: AuthenticationInfo
                    type: object
                    description: Data model for the complex type AuthenticationInfo.
                    properties:
                      authentication:
                        title: AuthenticationType
                        type: string
                        enum:
                          - OTP
                          - QRCODE
                          - U2F
                        description: |-
                          Below are the allowed values for the enumeration AuthenticationType.
                          - OTP - One-time password generated by the Payer FSP.
                          - QRCODE - QR code used as One Time Password.
                          - U2F - U2F is a new addition isolated to Thirdparty stream.
                      authenticationValue:
                        title: AuthenticationValue
                        anyOf:
                          - title: OtpValue
                            type: string
                            pattern: '^\d{3,10}$'
                            description: 'The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.'
                          - title: QRCODE
                            type: string
                            minLength: 1
                            maxLength: 64
                            description: QR code used as a One Time Password.
                          - title: U2FPinValue
                            type: object
                            description: |
                              U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
                            properties:
                              pinValue:
                                allOf:
                                  - title: U2FPIN
                                    type: string
                                    pattern: '^\S{1,64}$'
                                    minLength: 1
                                    maxLength: 64
                                    description: |
                                      U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
                                description: U2F challenge-response.
                              counter:
                                allOf:
                                  - title: Integer
                                    type: string
                                    pattern: '^[1-9]\d*$'
                                    description: The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.
                                description: Sequential counter used for cloning detection. Present only for U2F authentication.
                            required:
                              - pinValue
                              - counter
                        description: Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.
                    required:
                      - authentication
                      - authenticationValue
                  responseType:
                    title: AuthorizationResponse
                    type: string
                    enum:
                      - ENTERED
                      - REJECTED
                      - RESEND
                    description: |-
                      Below are the allowed values for the enumeration.
                      - ENTERED - Consumer entered the authentication value.
                      - REJECTED - Consumer rejected the transaction.
                      - RESEND - Consumer requested to resend the authentication value.
                    example: ENTERED
                required:
                  - authenticationInfo
                  - responseType
              example:
                authenticationInfo:
                  authentication: U2F
                  authenticationValue:
                    pinValue: <base64 encoded binary - the signed challenge
                    counter: 1
                responseType: ENTERED
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/thirdpartyRequests/authorizations/{ID}/error':
    parameters:
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsAuthorizationsByIdAndError
      summary: PutThirdpartyRequestsAuthorizationsByIdAndError
      description: |
        The HTTP request `PUT /thirdpartyRequests/authorizations/{ID}/error` is used by the DFSP or PISP to inform
        the other party that something went wrong with a Thirdparty Tranasction Authorization Request.

        The PISP may use this to tell the DFSP that the Thirdparty Tranasction Authorization Request is invalid or doesn't
        match a `transactionRequestId`.

        The DFSP may use this to tell the PISP that the signed challenge returned in `PUT /thirdpartyRequest/authorizations/{ID}`
        was invalid.
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  /thirdpartyRequests/transactions:
    parameters:
      - name: Accept
        in: header
        required: true
        schema:
          type: string
        description: The `Accept` header field indicates the version of the API the client would like the server to use.
      - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    post:
      requestBody:
        description: Transaction request to be created.
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsPostRequest
              type: object
              description: The object sent in the POST /thirdpartyRequests/transactions request.
              properties:
                transactionRequestId:
                  allOf:
                    - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                  description: |
                    Common ID between the FSPs for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.
                payee:
                  allOf:
                    - title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties:
                        partyIdInfo:
                          title: PartyIdInfo
                          type: object
                          description: Data model for the complex type PartyIdInfo.
                          properties:
                            partyIdType:
                              title: PartyIdType
                              type: string
                              enum:
                                - MSISDN
                                - EMAIL
                                - PERSONAL_ID
                                - BUSINESS
                                - DEVICE
                                - ACCOUNT_ID
                                - IBAN
                                - ALIAS
                                - CONSENT
                                - THIRD_PARTY_LINK
                              description: |
                                This is a variant based on FSPIOP `PartyIdType` specification.
                                Main difference being the CONSENT and THIRD_PARTY_LINK enums.

                                Below are the allowed values for the enumeration.
                                - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
                                Number, that is, the phone number) is used as reference to a participant.
                                The MSISDN identifier should be in international format according to the
                                [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
                                Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
                                international prefix.
                                - EMAIL - An email is used as reference to a
                                participant. The format of the email should be according to the informational
                                [RFC 3696](https://tools.ietf.org/html/rfc3696).
                                - PERSONAL_ID - A personal identifier is used as reference to a participant.
                                Examples of personal identification are passport number, birth certificate
                                number, and national registration number. The identifier number is added in
                                the PartyIdentifier element. The personal identifier type is added in the
                                PartySubIdOrType element.
                                - BUSINESS - A specific Business (for example, an organization or a company)
                                is used as reference to a participant. The BUSINESS identifier can be in any
                                format. To make a transaction connected to a specific username or bill number
                                in a Business, the PartySubIdOrType element should be used.
                                - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
                                specific business or organization is used as reference to a Party.
                                For referencing a specific device under a specific business or organization,
                                use the PartySubIdOrType element.
                                - ACCOUNT_ID - A bank account number or FSP account ID should be used as
                                reference to a participant. The ACCOUNT_ID identifier can be in any format,
                                as formats can greatly differ depending on country and FSP.
                                - IBAN - A bank account number or FSP account ID is used as reference to a
                                participant. The IBAN identifier can consist of up to 34 alphanumeric
                                characters and should be entered without whitespace.
                                - ALIAS An alias is used as reference to a participant. The alias should be
                                created in the FSP as an alternative reference to an account owner.
                                Another example of an alias is a username in the FSP system.
                                The ALIAS identifier can be in any format. It is also possible to use the
                                PartySubIdOrType element for identifying an account under an Alias defined
                                by the PartyIdentifier.
                                - CONSENT - TBD
                                - THIRD_PARTY_LINK - TBD
                              example: PERSONAL_ID
                            partyIdentifier:
                              $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payer/allOf/0/properties/partyIdentifier'
                            partySubIdOrType:
                              $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payer/allOf/0/properties/partySubIdOrType'
                            fspId:
                              $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payer/allOf/0/properties/fspId'
                            extensionList:
                              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema/properties/errorInformation/properties/extensionList'
                          required:
                            - partyIdType
                            - partyIdentifier
                        merchantClassificationCode:
                          title: MerchantClassificationCode
                          type: string
                          pattern: '^[\d]{1,4}$'
                          description: 'A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.'
                        name:
                          title: PartyName
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Name of the Party. Could be a real name or a nickname.
                        personalInfo:
                          title: PartyPersonalInfo
                          type: object
                          description: Data model for the complex type PartyPersonalInfo.
                          properties:
                            complexName:
                              title: PartyComplexName
                              type: object
                              description: Data model for the complex type PartyComplexName.
                              properties:
                                firstName:
                                  title: FirstName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: First name of the Party (Name Type).
                                  example: Henrik
                                middleName:
                                  title: MiddleName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: Middle name of the Party (Name Type).
                                  example: Johannes
                                lastName:
                                  title: LastName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: Last name of the Party (Name Type).
                                  example: Karlsson
                            dateOfBirth:
                              title: DateofBirth (type Date)
                              type: string
                              pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$'
                              description: Date of Birth of the Party.
                              example: '1966-06-16'
                      required:
                        - partyIdInfo
                  description: Information about the Payee in the proposed financial transaction.
                payer:
                  allOf:
                    - title: PartyIdInfo
                      type: object
                      description: Data model for the complex type PartyIdInfo.
                      properties:
                        partyIdType:
                          title: PartyIdTypeTPLink
                          type: string
                          enum:
                            - THIRD_PARTY_LINK
                          description: |
                            This is a variant based on FSPIOP `PartyIdType` specification.
                            This validation interface should be use by `POST /thirdpartyRequests/transactions`
                            - THIRD_PARTY_LINK - is the DFSP's internal reference which allows DFSP to find out the corresponding consent
                          example: PERSONAL_ID
                        partyIdentifier:
                          title: PartyIdentifier
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Identifier of the Party.
                          example: '16135551212'
                        partySubIdOrType:
                          title: PartySubIdOrType
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: 'Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.'
                        fspId:
                          title: FspId
                          type: string
                          minLength: 1
                          maxLength: 32
                          description: FSP identifier.
                        extensionList:
                          $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema/properties/errorInformation/properties/extensionList'
                      required:
                        - partyIdType
                        - partyIdentifier
                  description: Information about the Payer in the proposed financial transaction.
                amountType:
                  allOf:
                    - title: AmountType
                      type: string
                      enum:
                        - SEND
                        - RECEIVE
                      description: |-
                        Below are the allowed values for the enumeration AmountType.
                        - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                        - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                      example: RECEIVE
                  description: 'SEND for sendAmount, RECEIVE for receiveAmount.'
                amount:
                  allOf:
                    - title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties:
                        currency:
                          $ref: '#/paths/~1accounts~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/accounts/items/properties/currency'
                        amount:
                          title: Amount
                          type: string
                          pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
                          description: 'The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.'
                          example: '123.45'
                      required:
                        - currency
                        - amount
                  description: Requested amount to be transferred from the Payer to Payee.
                transactionType:
                  allOf:
                    - $ref: '#/paths/~1thirdpartyRequests~1authorizations/post/requestBody/content/application~1json/schema/properties/transactionType'
                  description: Type of transaction.
                expiration:
                  type: string
                  description: |
                    Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond.
                  example: '2016-05-24T08:38:08.699-04:00'
              required:
                - transactionRequestId
                - payee
                - payer
                - amountType
                - amount
                - transactionType
                - expiration
            example:
              transactionRequestId: 8d34f91d-d078-4077-8263-2c047876fcf6
              payee:
                partyIdInfo:
                  partyIdType: MSISDN
                  partyIdentifier: +44 1234 5678
                  fspId: dfspb
              payer:
                partyIdType: THIRD_PARTY_LINK
                partyIdentifier: qwerty-123456
                fspId: dfspa
              amountType: SEND
              amount:
                amount: '100'
                currency: USD
              transactionType:
                scenario: TRANSFER
                initiator: PAYER
                initiatorType: CONSUMER
              expiration: '2020-07-15T22:17:28.985-01:00'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
      operationId: CreateThirdpartyTransactionRequests
      summary: CreateThirdpartyTransactionRequests
      description: The HTTP request POST `/thirdpartyRequests/transactions` is used by a PISP to initiate a 3rd party Transaction request with a DFSP
      tags:
        - thirdpartyRequests
        - sampled
  '/thirdpartyRequests/transactions/{ID}':
    parameters:
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    get:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: GetThirdpartyTransactionRequests
      summary: GetThirdpartyTransactionRequests
      description: |
        The HTTP request `GET /thirdpartyRequests/transactions/{ID}` is used to request the 
        retrieval of a third party transaction request.
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: UpdateThirdPartyTransactionRequests
      summary: UpdateThirdPartyTransactionRequests
      description: |
        The HTTP request `PUT /thirdpartyRequests/transactions/{ID}` is used by the DFSP to inform the client about
        the status of a previously requested thirdparty transaction request.

        Switch(Thirdparty API Adapter) -> PISP
      parameters:
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsIDPutResponse
              type: object
              description: 'The object sent in the PUT /thirdPartyRequests/transactions/{ID} request.'
              properties:
                transactionId:
                  $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                transactionRequestState:
                  title: TransactionRequestState
                  type: string
                  enum:
                    - RECEIVED
                    - PENDING
                    - ACCEPTED
                    - REJECTED
                  description: |-
                    Below are the allowed values for the enumeration.
                    - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
                    - PENDING - Payer FSP has sent the transaction request to the Payer.
                    - ACCEPTED - Payer has approved the transaction.
                    - REJECTED - Payer has rejected the transaction.
                  example: RECEIVED
              required:
                - transactionId
                - transactionRequestState
            example:
              transactionId: 11111111-0000-0000-0000-000000000000
              transactionRequestState: RECEIVED
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
    patch:
      operationId: NotifyThirdpartyTransactionRequests
      summary: NotifyThirdpartyTransactionRequests
      description: |
        The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used to
        notify a thirdparty of the outcome of a transaction request.

        Switch(Thirdparty API Adapter) -> PISP
      tags:
        - thirdpartyRequests
      parameters:
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsIDPatchResponse
              type: object
              description: 'The object sent in the PATCH /thirdpartyRequests/transactions/{ID} callback.'
              properties:
                transactionId:
                  $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                transactionRequestState:
                  $ref: '#/paths/~1thirdpartyRequests~1transactions~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/transactionRequestState'
                transactionState:
                  title: TransactionState
                  type: string
                  enum:
                    - RECEIVED
                    - PENDING
                    - COMPLETED
                    - REJECTED
                  description: |-
                    Below are the allowed values for the enumeration.
                    - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
                    - PENDING - Payee FSP has validated the transaction.
                    - COMPLETED - Payee FSP has successfully performed the transaction.
                    - REJECTED - Payee FSP has failed to perform the transaction.
                  example: RECEIVED
              required:
                - transactionId
                - transactionRequestState
                - transactionState
            example:
              transactionId: 11111111-0000-0000-0000-000000000000
              transactionRequestState: ACCEPTED
              transactionState: COMMITTED
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/thirdpartyRequests/transactions/{ID}/error':
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: ThirdpartyTransactionRequestsError
      summary: ThirdpartyTransactionRequestsError
      description: |
        If the server is unable to find the transaction request, or another processing error occurs,
        the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is used.
        The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of 
        the thirdparty transaction request.
      parameters:
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  /thirdpartyRequests/verifications:
    parameters:
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    post:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerifications
      summary: PutThirdpartyRequestsVerifications
      description: |
        The HTTP request `POST /thirdpartyRequests/verifications` is used by the DFSP to verify a third party authorization.
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
      requestBody:
        description: The thirdparty authorization details to verify
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsVerificationsPostRequest
              type: object
              description: The object sent in the POST /thirdpartyRequests/verifications request.
              properties:
                verificationRequestId:
                  allOf:
                    - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                challenge:
                  type: string
                  description: Base64 encoded bytes - The challenge generated by the DFSP.
                value:
                  type: object
                  properties:
                    authenticationInfo:
                      $ref: '#/paths/~1thirdpartyRequests~1authorizations~1%7BID%7D/put/responses/200/content/application~1json/schema/properties/authenticationInfo'
                    responseType:
                      $ref: '#/paths/~1thirdpartyRequests~1authorizations~1%7BID%7D/put/responses/200/content/application~1json/schema/properties/responseType'
                consentId:
                  allOf:
                    - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'
                  description: |
                    The id of the stored consent object that contains the credential with which to verify
                    the signed challenge against.
              required:
                - verificationRequestId
                - challenge
                - value
                - consentId
            example:
              verificationRequestId: 44444444-0000-0000-0000-000000000000
              challenge: <base64 encoded binary - the encoded challenge>
              value:
                authenticationInfo:
                  authentication: U2F
                  authenticationValue:
                    pinValue: <base64 encoded binary - the signed challenge>
                    counter: '1'
                responseType: ENTERED
              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/thirdpartyRequests/verifications/{ID}':
    parameters:
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerificationsById
      summary: PutThirdpartyRequestsVerificationsById
      description: |
        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}` is used by the Auth-Service to inform
        the DFSP of a successful result in validating the verification of a Thirdparty Transaction Request.

        If the validation fails, The Auth-Service MUST use `PUT /thirdpartyRequests/verifications/{ID}/error`
        instead.
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
      requestBody:
        description: The result of validating the Thirdparty Transaction Request
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsVerificationsIDPutResponse
              type: object
              description: 'The object sent in the PUT /thirdpartyRequests/verifications/{ID} request.'
              properties:
                authenticationResponse:
                  type: string
                  enum:
                    - VERIFIED
                  description: The verification passed
              required:
                - authenticationResponse
            example:
              authenticationResponse: VERIFIED
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
  '/thirdpartyRequests/verifications/{ID}/error':
    parameters:
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'
      - $ref: '#/paths/~1accounts~1%7BID%7D~1error/parameters/1'
      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/1'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/2'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/3'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/4'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/5'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/6'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/7'
      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/8'
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerificationsByIdAndError
      summary: PutThirdpartyRequestsVerificationsByIdAndError
      description: |
        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}/error` is used by the Auth-Service to inform
        the DFSP of a failure in validating or looking up the verification of a Thirdparty Transaction Request.
      parameters:
        - $ref: '#/paths/~1thirdpartyRequests~1transactions/parameters/0'
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'
        '400':
          $ref: '#/paths/~1consents/post/responses/400'
        '401':
          $ref: '#/paths/~1consents/post/responses/401'
        '403':
          $ref: '#/paths/~1consents/post/responses/403'
        '404':
          $ref: '#/paths/~1consents/post/responses/404'
        '405':
          $ref: '#/paths/~1consents/post/responses/405'
        '406':
          $ref: '#/paths/~1consents/post/responses/406'
        '501':
          $ref: '#/paths/~1consents/post/responses/501'
        '503':
          $ref: '#/paths/~1consents/post/responses/503'
